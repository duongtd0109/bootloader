
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002c14  08002c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc4  08002cc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ccc  08002ccc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ccc  08002ccc  00012ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000078  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f27  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014f6  00000000  00000000  00027fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  000294c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000658  00000000  00000000  00029ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eea4  00000000  00000000  0002a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000083b9  00000000  00000000  0004909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8e3f  00000000  00000000  00051455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010a294  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002168  00000000  00000000  0010a2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002bfc 	.word	0x08002bfc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08002bfc 	.word	0x08002bfc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <go2APP>:
//void __attribute__((section(".RamFunc"))) blink(uint32_t ticks) {
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
//	HAL_Delay(ticks);
//}

void go2APP() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
	uint32_t jumpAddress;
	pFunciton jumpToApp;
	printf("Bootloader start!\r\n");
 80004d2:	4815      	ldr	r0, [pc, #84]	; (8000528 <go2APP+0x5c>)
 80004d4:	f001 ff02 	bl	80022dc <puts>

	//check if app is installed in flash region
	if (((*(uint32_t*) FLASH_APP_ADDR) & 0x2ffe0000) == 0x20020000) {
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <go2APP+0x60>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <go2APP+0x64>)
 80004de:	4013      	ands	r3, r2
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <go2APP+0x68>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d115      	bne.n	8000512 <go2APP+0x46>
		printf("Jump to app!\r\n");
 80004e6:	4814      	ldr	r0, [pc, #80]	; (8000538 <go2APP+0x6c>)
 80004e8:	f001 fef8 	bl	80022dc <puts>
		HAL_Delay(1000);
 80004ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f0:	f000 fb20 	bl	8000b34 <HAL_Delay>

		//jump to the app
		jumpAddress = *(uint32_t*) (FLASH_APP_ADDR+4);
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <go2APP+0x70>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	60fb      	str	r3, [r7, #12]
		jumpToApp = (pFunciton) jumpAddress;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	60bb      	str	r3, [r7, #8]

		//initial app stack pointer
		__set_MSP(*(uint32_t*)FLASH_APP_ADDR);
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <go2APP+0x60>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f383 8808 	msr	MSP, r3
}
 800050a:	bf00      	nop
		jumpToApp();
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	4798      	blx	r3
	}
	else {
		printf("App not found!\r\n");
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	}
}
 8000510:	e006      	b.n	8000520 <go2APP+0x54>
		printf("App not found!\r\n");
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <go2APP+0x74>)
 8000514:	f001 fee2 	bl	80022dc <puts>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000518:	2101      	movs	r1, #1
 800051a:	480a      	ldr	r0, [pc, #40]	; (8000544 <go2APP+0x78>)
 800051c:	f000 fdc9 	bl	80010b2 <HAL_GPIO_TogglePin>
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	08002c14 	.word	0x08002c14
 800052c:	08008000 	.word	0x08008000
 8000530:	2ffe0000 	.word	0x2ffe0000
 8000534:	20020000 	.word	0x20020000
 8000538:	08002c28 	.word	0x08002c28
 800053c:	08008004 	.word	0x08008004
 8000540:	08002c38 	.word	0x08002c38
 8000544:	40020400 	.word	0x40020400

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fa80 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f808 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f89a 	bl	800068c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000558:	f000 f86e 	bl	8000638 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  go2APP();
 800055c:	f7ff ffb6 	bl	80004cc <go2APP>
 8000560:	e7fc      	b.n	800055c <main+0x14>
	...

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fe3c 	bl	80021f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d8:	23a8      	movs	r3, #168	; 0xa8
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fd7d 	bl	80010e8 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f8ac 	bl	8000750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f000 ffde 	bl	80015d8 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000622:	f000 f895 	bl	8000750 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_USART1_UART_Init+0x50>)
 8000640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 8000670:	f001 f9d2 	bl	8001a18 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800067a:	f000 f869 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000008c 	.word	0x2000008c
 8000688:	40011000 	.word	0x40011000

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <MX_GPIO_Init+0x98>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a1e      	ldr	r2, [pc, #120]	; (8000724 <MX_GPIO_Init+0x98>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <MX_GPIO_Init+0x98>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_GPIO_Init+0x98>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_GPIO_Init+0x98>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_GPIO_Init+0x98>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_GPIO_Init+0x98>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a10      	ldr	r2, [pc, #64]	; (8000724 <MX_GPIO_Init+0x98>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_GPIO_Init+0x98>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <MX_GPIO_Init+0x9c>)
 80006fc:	f000 fcc0 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000700:	2301      	movs	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4619      	mov	r1, r3
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_GPIO_Init+0x9c>)
 8000718:	f000 fb16 	bl	8000d48 <HAL_GPIO_Init>

}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40020400 	.word	0x40020400

0800072c <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8000734:	1d39      	adds	r1, r7, #4
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	2201      	movs	r2, #1
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <__io_putchar+0x20>)
 800073c:	f001 f9b9 	bl	8001ab2 <HAL_UART_Transmit>
  return ch;
 8000740:	687b      	ldr	r3, [r7, #4]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000008c 	.word	0x2000008c

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <HAL_MspInit+0x4c>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000770:	6453      	str	r3, [r2, #68]	; 0x44
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_MspInit+0x4c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	6413      	str	r3, [r2, #64]	; 0x40
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a19      	ldr	r2, [pc, #100]	; (8000830 <HAL_UART_MspInit+0x84>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d12c      	bne.n	8000828 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007d8:	f043 0310 	orr.w	r3, r3, #16
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f003 0310 	and.w	r3, r3, #16
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a10      	ldr	r2, [pc, #64]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000806:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000818:	2307      	movs	r3, #7
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_UART_MspInit+0x8c>)
 8000824:	f000 fa90 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40011000 	.word	0x40011000
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <NMI_Handler+0x4>

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f934 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	e00a      	b.n	80008b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008a2:	f3af 8000 	nop.w
 80008a6:	4601      	mov	r1, r0
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	60ba      	str	r2, [r7, #8]
 80008ae:	b2ca      	uxtb	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3301      	adds	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dbf0      	blt.n	80008a2 <_read+0x12>
	}

return len;
 80008c0:	687b      	ldr	r3, [r7, #4]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	e009      	b.n	80008f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	60ba      	str	r2, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff21 	bl	800072c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	3301      	adds	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dbf1      	blt.n	80008dc <_write+0x12>
	}
	return len;
 80008f8:	687b      	ldr	r3, [r7, #4]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <_close>:

int _close(int file)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
	return -1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800092a:	605a      	str	r2, [r3, #4]
	return 0;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <_isatty>:

int _isatty(int file)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	return 1;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
	return 0;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <_sbrk+0x5c>)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <_sbrk+0x60>)
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <_sbrk+0x64>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <_sbrk+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d207      	bcs.n	80009ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800099c:	f001 fbfe 	bl	800219c <__errno>
 80009a0:	4603      	mov	r3, r0
 80009a2:	220c      	movs	r2, #12
 80009a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	e009      	b.n	80009c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <_sbrk+0x64>)
 80009bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20020000 	.word	0x20020000
 80009cc:	00000400 	.word	0x00000400
 80009d0:	200000d0 	.word	0x200000d0
 80009d4:	200000e8 	.word	0x200000e8

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a02:	490e      	ldr	r1, [pc, #56]	; (8000a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a18:	4c0b      	ldr	r4, [pc, #44]	; (8000a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a26:	f7ff ffd7 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f001 fbbd 	bl	80021a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fd8b 	bl	8000548 <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a40:	08002cd4 	.word	0x08002cd4
  ldr r2, =_sbss
 8000a44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a48:	200000e8 	.word	0x200000e8

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f931 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff fe6a 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f93b 	bl	8000d2e <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f911 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	200000d4 	.word	0x200000d4

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200000d4 	.word	0x200000d4

08000b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff ffee 	bl	8000b1c <HAL_GetTick>
 8000b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4c:	d005      	beq.n	8000b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_Delay+0x44>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b5a:	bf00      	nop
 8000b5c:	f7ff ffde 	bl	8000b1c <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8f7      	bhi.n	8000b5c <HAL_Delay+0x28>
  {
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff47 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff5c 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff8e 	bl	8000c34 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffb0 	bl	8000c9c <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e16b      	b.n	800103c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 815a 	bne.w	8001036 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d130      	bne.n	8000dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d017      	beq.n	8000e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80b4 	beq.w	8001036 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b60      	ldr	r3, [pc, #384]	; (8001054 <HAL_GPIO_Init+0x30c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a5f      	ldr	r2, [pc, #380]	; (8001054 <HAL_GPIO_Init+0x30c>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b5d      	ldr	r3, [pc, #372]	; (8001054 <HAL_GPIO_Init+0x30c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eea:	4a5b      	ldr	r2, [pc, #364]	; (8001058 <HAL_GPIO_Init+0x310>)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a52      	ldr	r2, [pc, #328]	; (800105c <HAL_GPIO_Init+0x314>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d02b      	beq.n	8000f6e <HAL_GPIO_Init+0x226>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a51      	ldr	r2, [pc, #324]	; (8001060 <HAL_GPIO_Init+0x318>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d025      	beq.n	8000f6a <HAL_GPIO_Init+0x222>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a50      	ldr	r2, [pc, #320]	; (8001064 <HAL_GPIO_Init+0x31c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d01f      	beq.n	8000f66 <HAL_GPIO_Init+0x21e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4f      	ldr	r2, [pc, #316]	; (8001068 <HAL_GPIO_Init+0x320>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d019      	beq.n	8000f62 <HAL_GPIO_Init+0x21a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4e      	ldr	r2, [pc, #312]	; (800106c <HAL_GPIO_Init+0x324>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0x216>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <HAL_GPIO_Init+0x328>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_Init+0x212>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_GPIO_Init+0x32c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x20e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4b      	ldr	r2, [pc, #300]	; (8001078 <HAL_GPIO_Init+0x330>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_Init+0x20a>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e00e      	b.n	8000f70 <HAL_GPIO_Init+0x228>
 8000f52:	2308      	movs	r3, #8
 8000f54:	e00c      	b.n	8000f70 <HAL_GPIO_Init+0x228>
 8000f56:	2306      	movs	r3, #6
 8000f58:	e00a      	b.n	8000f70 <HAL_GPIO_Init+0x228>
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	e008      	b.n	8000f70 <HAL_GPIO_Init+0x228>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x228>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x228>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x228>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x228>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	f002 0203 	and.w	r2, r2, #3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f80:	4935      	ldr	r1, [pc, #212]	; (8001058 <HAL_GPIO_Init+0x310>)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <HAL_GPIO_Init+0x334>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb2:	4a32      	ldr	r2, [pc, #200]	; (800107c <HAL_GPIO_Init+0x334>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <HAL_GPIO_Init+0x334>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fdc:	4a27      	ldr	r2, [pc, #156]	; (800107c <HAL_GPIO_Init+0x334>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_GPIO_Init+0x334>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001006:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_GPIO_Init+0x334>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_GPIO_Init+0x334>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_GPIO_Init+0x334>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3301      	adds	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	f67f ae90 	bls.w	8000d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40013800 	.word	0x40013800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020400 	.word	0x40020400
 8001064:	40020800 	.word	0x40020800
 8001068:	40020c00 	.word	0x40020c00
 800106c:	40021000 	.word	0x40021000
 8001070:	40021400 	.word	0x40021400
 8001074:	40021800 	.word	0x40021800
 8001078:	40021c00 	.word	0x40021c00
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4013      	ands	r3, r2
 80010ca:	041a      	lsls	r2, r3, #16
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	400b      	ands	r3, r1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e267      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d075      	beq.n	80011f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001106:	4b88      	ldr	r3, [pc, #544]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b04      	cmp	r3, #4
 8001110:	d00c      	beq.n	800112c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001112:	4b85      	ldr	r3, [pc, #532]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d112      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4b82      	ldr	r3, [pc, #520]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800112a:	d10b      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4b7e      	ldr	r3, [pc, #504]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d05b      	beq.n	80011f0 <HAL_RCC_OscConfig+0x108>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d157      	bne.n	80011f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e242      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x74>
 800114e:	4b76      	ldr	r3, [pc, #472]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a75      	ldr	r2, [pc, #468]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01d      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x98>
 8001166:	4b70      	ldr	r3, [pc, #448]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a6f      	ldr	r2, [pc, #444]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b6d      	ldr	r3, [pc, #436]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a6c      	ldr	r2, [pc, #432]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 8001180:	4b69      	ldr	r3, [pc, #420]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a68      	ldr	r2, [pc, #416]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b66      	ldr	r3, [pc, #408]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a65      	ldr	r2, [pc, #404]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fcbc 	bl	8000b1c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fcb8 	bl	8000b1c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e207      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xc0>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fca8 	bl	8000b1c <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fca4 	bl	8000b1c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1f3      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	4b51      	ldr	r3, [pc, #324]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0xe8>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d063      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fe:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b47      	ldr	r3, [pc, #284]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	2b08      	cmp	r3, #8
 8001214:	d11c      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d116      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	4b41      	ldr	r3, [pc, #260]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e1c7      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4937      	ldr	r1, [pc, #220]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	e03a      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d020      	beq.n	800129a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <HAL_RCC_OscConfig+0x244>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fc5d 	bl	8000b1c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fc59 	bl	8000b1c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1a8      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4925      	ldr	r1, [pc, #148]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e015      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_RCC_OscConfig+0x244>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fc3c 	bl	8000b1c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff fc38 	bl	8000b1c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e187      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d036      	beq.n	8001340 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d016      	beq.n	8001308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_RCC_OscConfig+0x248>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff fc1c 	bl	8000b1c <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc18 	bl	8000b1c <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e167      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80012fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x200>
 8001306:	e01b      	b.n	8001340 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_RCC_OscConfig+0x248>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fc05 	bl	8000b1c <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	e00e      	b.n	8001334 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001316:	f7ff fc01 	bl	8000b1c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d907      	bls.n	8001334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e150      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
 8001328:	40023800 	.word	0x40023800
 800132c:	42470000 	.word	0x42470000
 8001330:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b88      	ldr	r3, [pc, #544]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ea      	bne.n	8001316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8097 	beq.w	800147c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b81      	ldr	r3, [pc, #516]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b7d      	ldr	r3, [pc, #500]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a7c      	ldr	r2, [pc, #496]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b7a      	ldr	r3, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b77      	ldr	r3, [pc, #476]	; (800155c <HAL_RCC_OscConfig+0x474>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d118      	bne.n	80013bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b74      	ldr	r3, [pc, #464]	; (800155c <HAL_RCC_OscConfig+0x474>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a73      	ldr	r2, [pc, #460]	; (800155c <HAL_RCC_OscConfig+0x474>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001396:	f7ff fbc1 	bl	8000b1c <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139e:	f7ff fbbd 	bl	8000b1c <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e10c      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_RCC_OscConfig+0x474>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x2ea>
 80013c4:	4b64      	ldr	r3, [pc, #400]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	4a63      	ldr	r2, [pc, #396]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6713      	str	r3, [r2, #112]	; 0x70
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x324>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x30c>
 80013da:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	4a5e      	ldr	r2, [pc, #376]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6713      	str	r3, [r2, #112]	; 0x70
 80013e6:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	4a5b      	ldr	r2, [pc, #364]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6713      	str	r3, [r2, #112]	; 0x70
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0x324>
 80013f4:	4b58      	ldr	r3, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a57      	ldr	r2, [pc, #348]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	4b55      	ldr	r3, [pc, #340]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a54      	ldr	r2, [pc, #336]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001406:	f023 0304 	bic.w	r3, r3, #4
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d015      	beq.n	8001440 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fb82 	bl	8000b1c <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141a:	e00a      	b.n	8001432 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fb7e 	bl	8000b1c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	; 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e0cb      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	4b49      	ldr	r3, [pc, #292]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0ee      	beq.n	800141c <HAL_RCC_OscConfig+0x334>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fb6c 	bl	8000b1c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fb68 	bl	8000b1c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0b5      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145e:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ee      	bne.n	8001448 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	4a38      	ldr	r2, [pc, #224]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80a1 	beq.w	80015c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d05c      	beq.n	800154c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d141      	bne.n	800151e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_RCC_OscConfig+0x478>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb3c 	bl	8000b1c <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fb38 	bl	8000b1c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e087      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69da      	ldr	r2, [r3, #28]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	019b      	lsls	r3, r3, #6
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	3b01      	subs	r3, #1
 80014e0:	041b      	lsls	r3, r3, #16
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	491b      	ldr	r1, [pc, #108]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x478>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb11 	bl	8000b1c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fb0d 	bl	8000b1c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e05c      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x416>
 800151c:	e054      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_RCC_OscConfig+0x478>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fafa 	bl	8000b1c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff faf6 	bl	8000b1c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e045      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x444>
 800154a:	e03d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d107      	bne.n	8001564 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e038      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000
 8001560:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_RCC_OscConfig+0x4ec>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d028      	beq.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d121      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d11a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800159a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800159c:	4293      	cmp	r3, r2
 800159e:	d111      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	3b01      	subs	r3, #1
 80015ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d107      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0cc      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d90c      	bls.n	8001614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b65      	ldr	r3, [pc, #404]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0b8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a58      	ldr	r2, [pc, #352]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a52      	ldr	r2, [pc, #328]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800164e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	494d      	ldr	r1, [pc, #308]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d044      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e07f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d003      	beq.n	8001696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e06f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e067      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4934      	ldr	r1, [pc, #208]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7ff fa28 	bl	8000b1c <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff fa24 	bl	8000b1c <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d20c      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e032      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4916      	ldr	r1, [pc, #88]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800175e:	f000 f821 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8001762:	4602      	mov	r2, r0
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	490a      	ldr	r1, [pc, #40]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	5ccb      	ldrb	r3, [r1, r3]
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f988 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00
 8001794:	40023800 	.word	0x40023800
 8001798:	08002c48 	.word	0x08002c48
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a8:	b094      	sub	sp, #80	; 0x50
 80017aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44
 80017b0:	2300      	movs	r3, #0
 80017b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017b4:	2300      	movs	r3, #0
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017bc:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d00d      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x40>
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	f200 80e1 	bhi.w	8001990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x34>
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x3a>
 80017d6:	e0db      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b73      	ldr	r3, [pc, #460]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017dc:	e0db      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017de:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_GetSysClockFreq+0x208>)
 80017e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017e2:	e0d8      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ee:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d063      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	2200      	movs	r2, #0
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
 8001804:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
 800180e:	2300      	movs	r3, #0
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
 8001812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001816:	4622      	mov	r2, r4
 8001818:	462b      	mov	r3, r5
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	0159      	lsls	r1, r3, #5
 8001824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001828:	0150      	lsls	r0, r2, #5
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4621      	mov	r1, r4
 8001830:	1a51      	subs	r1, r2, r1
 8001832:	6139      	str	r1, [r7, #16]
 8001834:	4629      	mov	r1, r5
 8001836:	eb63 0301 	sbc.w	r3, r3, r1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001848:	4659      	mov	r1, fp
 800184a:	018b      	lsls	r3, r1, #6
 800184c:	4651      	mov	r1, sl
 800184e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001852:	4651      	mov	r1, sl
 8001854:	018a      	lsls	r2, r1, #6
 8001856:	4651      	mov	r1, sl
 8001858:	ebb2 0801 	subs.w	r8, r2, r1
 800185c:	4659      	mov	r1, fp
 800185e:	eb63 0901 	sbc.w	r9, r3, r1
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800186e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001876:	4690      	mov	r8, r2
 8001878:	4699      	mov	r9, r3
 800187a:	4623      	mov	r3, r4
 800187c:	eb18 0303 	adds.w	r3, r8, r3
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	462b      	mov	r3, r5
 8001884:	eb49 0303 	adc.w	r3, r9, r3
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001896:	4629      	mov	r1, r5
 8001898:	024b      	lsls	r3, r1, #9
 800189a:	4621      	mov	r1, r4
 800189c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a0:	4621      	mov	r1, r4
 80018a2:	024a      	lsls	r2, r1, #9
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018aa:	2200      	movs	r2, #0
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018b4:	f7fe fc88 	bl	80001c8 <__aeabi_uldivmod>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4613      	mov	r3, r2
 80018be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018c0:	e058      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c2:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	2200      	movs	r2, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	4611      	mov	r1, r2
 80018ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018d2:	623b      	str	r3, [r7, #32]
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
 80018d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018dc:	4642      	mov	r2, r8
 80018de:	464b      	mov	r3, r9
 80018e0:	f04f 0000 	mov.w	r0, #0
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	0159      	lsls	r1, r3, #5
 80018ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ee:	0150      	lsls	r0, r2, #5
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4641      	mov	r1, r8
 80018f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018fa:	4649      	mov	r1, r9
 80018fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800190c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001914:	ebb2 040a 	subs.w	r4, r2, sl
 8001918:	eb63 050b 	sbc.w	r5, r3, fp
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	00eb      	lsls	r3, r5, #3
 8001926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800192a:	00e2      	lsls	r2, r4, #3
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	4643      	mov	r3, r8
 8001932:	18e3      	adds	r3, r4, r3
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	464b      	mov	r3, r9
 8001938:	eb45 0303 	adc.w	r3, r5, r3
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194a:	4629      	mov	r1, r5
 800194c:	028b      	lsls	r3, r1, #10
 800194e:	4621      	mov	r1, r4
 8001950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001954:	4621      	mov	r1, r4
 8001956:	028a      	lsls	r2, r1, #10
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800195e:	2200      	movs	r2, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	61fa      	str	r2, [r7, #28]
 8001964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001968:	f7fe fc2e 	bl	80001c8 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4613      	mov	r3, r2
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800198e:	e002      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001998:	4618      	mov	r0, r3
 800199a:	3750      	adds	r7, #80	; 0x50
 800199c:	46bd      	mov	sp, r7
 800199e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	00f42400 	.word	0x00f42400
 80019ac:	007a1200 	.word	0x007a1200

080019b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000000 	.word	0x20000000

080019c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019cc:	f7ff fff0 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0a9b      	lsrs	r3, r3, #10
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	; (80019ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08002c58 	.word	0x08002c58

080019f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f4:	f7ff ffdc 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	0b5b      	lsrs	r3, r3, #13
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	4903      	ldr	r1, [pc, #12]	; (8001a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a06:	5ccb      	ldrb	r3, [r1, r3]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	08002c58 	.word	0x08002c58

08001a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e03f      	b.n	8001aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe feb4 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2224      	movs	r2, #36	; 0x24
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f929 	bl	8001cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b08a      	sub	sp, #40	; 0x28
 8001ab6:	af02      	add	r7, sp, #8
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d17c      	bne.n	8001bcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HAL_UART_Transmit+0x2c>
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e075      	b.n	8001bce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_UART_Transmit+0x3e>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e06e      	b.n	8001bce <HAL_UART_Transmit+0x11c>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2221      	movs	r2, #33	; 0x21
 8001b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b06:	f7ff f809 	bl	8000b1c <HAL_GetTick>
 8001b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	88fa      	ldrh	r2, [r7, #6]
 8001b10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	88fa      	ldrh	r2, [r7, #6]
 8001b16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b20:	d108      	bne.n	8001b34 <HAL_UART_Transmit+0x82>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d104      	bne.n	8001b34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	e003      	b.n	8001b3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b44:	e02a      	b.n	8001b9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f840 	bl	8001bd6 <UART_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e036      	b.n	8001bce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10b      	bne.n	8001b7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	3302      	adds	r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	e007      	b.n	8001b8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1cf      	bne.n	8001b46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2200      	movs	r2, #0
 8001bae:	2140      	movs	r1, #64	; 0x40
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f810 	bl	8001bd6 <UART_WaitOnFlagUntilTimeout>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e006      	b.n	8001bce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bcc:	2302      	movs	r3, #2
  }
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b090      	sub	sp, #64	; 0x40
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	4613      	mov	r3, r2
 8001be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be6:	e050      	b.n	8001c8a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bee:	d04c      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bf6:	f7fe ff91 	bl	8000b1c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d241      	bcs.n	8001c8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	330c      	adds	r3, #12
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	e853 3f00 	ldrex	r3, [r3]
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	330c      	adds	r3, #12
 8001c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c26:	637a      	str	r2, [r7, #52]	; 0x34
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c2e:	e841 2300 	strex	r3, r2, [r1]
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e5      	bne.n	8001c06 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3314      	adds	r3, #20
 8001c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	e853 3f00 	ldrex	r3, [r3]
 8001c48:	613b      	str	r3, [r7, #16]
   return(result);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3314      	adds	r3, #20
 8001c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c5a:	623a      	str	r2, [r7, #32]
 8001c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c5e:	69f9      	ldr	r1, [r7, #28]
 8001c60:	6a3a      	ldr	r2, [r7, #32]
 8001c62:	e841 2300 	strex	r3, r2, [r1]
 8001c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1e5      	bne.n	8001c3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e00f      	b.n	8001caa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4013      	ands	r3, r2
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	bf0c      	ite	eq
 8001c9a:	2301      	moveq	r3, #1
 8001c9c:	2300      	movne	r3, #0
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d09f      	beq.n	8001be8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3740      	adds	r7, #64	; 0x40
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb8:	b0c0      	sub	sp, #256	; 0x100
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd0:	68d9      	ldr	r1, [r3, #12]
 8001cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	ea40 0301 	orr.w	r3, r0, r1
 8001cdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d0c:	f021 010c 	bic.w	r1, r1, #12
 8001d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2e:	6999      	ldr	r1, [r3, #24]
 8001d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	ea40 0301 	orr.w	r3, r0, r1
 8001d3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b8f      	ldr	r3, [pc, #572]	; (8001f80 <UART_SetConfig+0x2cc>)
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d005      	beq.n	8001d54 <UART_SetConfig+0xa0>
 8001d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b8d      	ldr	r3, [pc, #564]	; (8001f84 <UART_SetConfig+0x2d0>)
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d104      	bne.n	8001d5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d54:	f7ff fe4c 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001d58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001d5c:	e003      	b.n	8001d66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d5e:	f7ff fe33 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 8001d62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d70:	f040 810c 	bne.w	8001f8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d86:	4622      	mov	r2, r4
 8001d88:	462b      	mov	r3, r5
 8001d8a:	1891      	adds	r1, r2, r2
 8001d8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001d8e:	415b      	adcs	r3, r3
 8001d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d96:	4621      	mov	r1, r4
 8001d98:	eb12 0801 	adds.w	r8, r2, r1
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	eb43 0901 	adc.w	r9, r3, r1
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001db6:	4690      	mov	r8, r2
 8001db8:	4699      	mov	r9, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	eb18 0303 	adds.w	r3, r8, r3
 8001dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001dc4:	462b      	mov	r3, r5
 8001dc6:	eb49 0303 	adc.w	r3, r9, r3
 8001dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001dda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001de2:	460b      	mov	r3, r1
 8001de4:	18db      	adds	r3, r3, r3
 8001de6:	653b      	str	r3, [r7, #80]	; 0x50
 8001de8:	4613      	mov	r3, r2
 8001dea:	eb42 0303 	adc.w	r3, r2, r3
 8001dee:	657b      	str	r3, [r7, #84]	; 0x54
 8001df0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001df4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001df8:	f7fe f9e6 	bl	80001c8 <__aeabi_uldivmod>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4b61      	ldr	r3, [pc, #388]	; (8001f88 <UART_SetConfig+0x2d4>)
 8001e02:	fba3 2302 	umull	r2, r3, r3, r2
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	011c      	lsls	r4, r3, #4
 8001e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	464b      	mov	r3, r9
 8001e20:	1891      	adds	r1, r2, r2
 8001e22:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e24:	415b      	adcs	r3, r3
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e2c:	4641      	mov	r1, r8
 8001e2e:	eb12 0a01 	adds.w	sl, r2, r1
 8001e32:	4649      	mov	r1, r9
 8001e34:	eb43 0b01 	adc.w	fp, r3, r1
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e4c:	4692      	mov	sl, r2
 8001e4e:	469b      	mov	fp, r3
 8001e50:	4643      	mov	r3, r8
 8001e52:	eb1a 0303 	adds.w	r3, sl, r3
 8001e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e5a:	464b      	mov	r3, r9
 8001e5c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001e74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	18db      	adds	r3, r3, r3
 8001e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8001e7e:	4613      	mov	r3, r2
 8001e80:	eb42 0303 	adc.w	r3, r2, r3
 8001e84:	647b      	str	r3, [r7, #68]	; 0x44
 8001e86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001e8e:	f7fe f99b 	bl	80001c8 <__aeabi_uldivmod>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <UART_SetConfig+0x2d4>)
 8001e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2264      	movs	r2, #100	; 0x64
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	1acb      	subs	r3, r1, r3
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001eae:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <UART_SetConfig+0x2d4>)
 8001eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ebc:	441c      	add	r4, r3
 8001ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ec8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001ecc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	1891      	adds	r1, r2, r2
 8001ed6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ed8:	415b      	adcs	r3, r3
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001edc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1851      	adds	r1, r2, r1
 8001ee4:	6339      	str	r1, [r7, #48]	; 0x30
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	414b      	adcs	r3, r1
 8001eea:	637b      	str	r3, [r7, #52]	; 0x34
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001ef8:	4659      	mov	r1, fp
 8001efa:	00cb      	lsls	r3, r1, #3
 8001efc:	4651      	mov	r1, sl
 8001efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f02:	4651      	mov	r1, sl
 8001f04:	00ca      	lsls	r2, r1, #3
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	189b      	adds	r3, r3, r2
 8001f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f14:	464b      	mov	r3, r9
 8001f16:	460a      	mov	r2, r1
 8001f18:	eb42 0303 	adc.w	r3, r2, r3
 8001f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001f34:	460b      	mov	r3, r1
 8001f36:	18db      	adds	r3, r3, r3
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	eb42 0303 	adc.w	r3, r2, r3
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f4a:	f7fe f93d 	bl	80001c8 <__aeabi_uldivmod>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <UART_SetConfig+0x2d4>)
 8001f54:	fba3 1302 	umull	r1, r3, r3, r2
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	2164      	movs	r1, #100	; 0x64
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	3332      	adds	r3, #50	; 0x32
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <UART_SetConfig+0x2d4>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	f003 0207 	and.w	r2, r3, #7
 8001f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4422      	add	r2, r4
 8001f7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f7c:	e105      	b.n	800218a <UART_SetConfig+0x4d6>
 8001f7e:	bf00      	nop
 8001f80:	40011000 	.word	0x40011000
 8001f84:	40011400 	.word	0x40011400
 8001f88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f90:	2200      	movs	r2, #0
 8001f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001f9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001f9e:	4642      	mov	r2, r8
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	1891      	adds	r1, r2, r2
 8001fa4:	6239      	str	r1, [r7, #32]
 8001fa6:	415b      	adcs	r3, r3
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fae:	4641      	mov	r1, r8
 8001fb0:	1854      	adds	r4, r2, r1
 8001fb2:	4649      	mov	r1, r9
 8001fb4:	eb43 0501 	adc.w	r5, r3, r1
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	00eb      	lsls	r3, r5, #3
 8001fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fc6:	00e2      	lsls	r2, r4, #3
 8001fc8:	4614      	mov	r4, r2
 8001fca:	461d      	mov	r5, r3
 8001fcc:	4643      	mov	r3, r8
 8001fce:	18e3      	adds	r3, r4, r3
 8001fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fd4:	464b      	mov	r3, r9
 8001fd6:	eb45 0303 	adc.w	r3, r5, r3
 8001fda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	008b      	lsls	r3, r1, #2
 8001ffe:	4621      	mov	r1, r4
 8002000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002004:	4621      	mov	r1, r4
 8002006:	008a      	lsls	r2, r1, #2
 8002008:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800200c:	f7fe f8dc 	bl	80001c8 <__aeabi_uldivmod>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4b60      	ldr	r3, [pc, #384]	; (8002198 <UART_SetConfig+0x4e4>)
 8002016:	fba3 2302 	umull	r2, r3, r3, r2
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	011c      	lsls	r4, r3, #4
 800201e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002022:	2200      	movs	r2, #0
 8002024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002028:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800202c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002030:	4642      	mov	r2, r8
 8002032:	464b      	mov	r3, r9
 8002034:	1891      	adds	r1, r2, r2
 8002036:	61b9      	str	r1, [r7, #24]
 8002038:	415b      	adcs	r3, r3
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002040:	4641      	mov	r1, r8
 8002042:	1851      	adds	r1, r2, r1
 8002044:	6139      	str	r1, [r7, #16]
 8002046:	4649      	mov	r1, r9
 8002048:	414b      	adcs	r3, r1
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002058:	4659      	mov	r1, fp
 800205a:	00cb      	lsls	r3, r1, #3
 800205c:	4651      	mov	r1, sl
 800205e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002062:	4651      	mov	r1, sl
 8002064:	00ca      	lsls	r2, r1, #3
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	4603      	mov	r3, r0
 800206c:	4642      	mov	r2, r8
 800206e:	189b      	adds	r3, r3, r2
 8002070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002074:	464b      	mov	r3, r9
 8002076:	460a      	mov	r2, r1
 8002078:	eb42 0303 	adc.w	r3, r2, r3
 800207c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	67bb      	str	r3, [r7, #120]	; 0x78
 800208a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002098:	4649      	mov	r1, r9
 800209a:	008b      	lsls	r3, r1, #2
 800209c:	4641      	mov	r1, r8
 800209e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020a2:	4641      	mov	r1, r8
 80020a4:	008a      	lsls	r2, r1, #2
 80020a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020aa:	f7fe f88d 	bl	80001c8 <__aeabi_uldivmod>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4b39      	ldr	r3, [pc, #228]	; (8002198 <UART_SetConfig+0x4e4>)
 80020b4:	fba3 1302 	umull	r1, r3, r3, r2
 80020b8:	095b      	lsrs	r3, r3, #5
 80020ba:	2164      	movs	r1, #100	; 0x64
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	3332      	adds	r3, #50	; 0x32
 80020c6:	4a34      	ldr	r2, [pc, #208]	; (8002198 <UART_SetConfig+0x4e4>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d2:	441c      	add	r4, r3
 80020d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020d8:	2200      	movs	r2, #0
 80020da:	673b      	str	r3, [r7, #112]	; 0x70
 80020dc:	677a      	str	r2, [r7, #116]	; 0x74
 80020de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80020e2:	4642      	mov	r2, r8
 80020e4:	464b      	mov	r3, r9
 80020e6:	1891      	adds	r1, r2, r2
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	415b      	adcs	r3, r3
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020f2:	4641      	mov	r1, r8
 80020f4:	1851      	adds	r1, r2, r1
 80020f6:	6039      	str	r1, [r7, #0]
 80020f8:	4649      	mov	r1, r9
 80020fa:	414b      	adcs	r3, r1
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800210a:	4659      	mov	r1, fp
 800210c:	00cb      	lsls	r3, r1, #3
 800210e:	4651      	mov	r1, sl
 8002110:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002114:	4651      	mov	r1, sl
 8002116:	00ca      	lsls	r2, r1, #3
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	4603      	mov	r3, r0
 800211e:	4642      	mov	r2, r8
 8002120:	189b      	adds	r3, r3, r2
 8002122:	66bb      	str	r3, [r7, #104]	; 0x68
 8002124:	464b      	mov	r3, r9
 8002126:	460a      	mov	r2, r1
 8002128:	eb42 0303 	adc.w	r3, r2, r3
 800212c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800212e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	663b      	str	r3, [r7, #96]	; 0x60
 8002138:	667a      	str	r2, [r7, #100]	; 0x64
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002146:	4649      	mov	r1, r9
 8002148:	008b      	lsls	r3, r1, #2
 800214a:	4641      	mov	r1, r8
 800214c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002150:	4641      	mov	r1, r8
 8002152:	008a      	lsls	r2, r1, #2
 8002154:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002158:	f7fe f836 	bl	80001c8 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <UART_SetConfig+0x4e4>)
 8002162:	fba3 1302 	umull	r1, r3, r3, r2
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2164      	movs	r1, #100	; 0x64
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	3332      	adds	r3, #50	; 0x32
 8002174:	4a08      	ldr	r2, [pc, #32]	; (8002198 <UART_SetConfig+0x4e4>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4422      	add	r2, r4
 8002188:	609a      	str	r2, [r3, #8]
}
 800218a:	bf00      	nop
 800218c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002190:	46bd      	mov	sp, r7
 8002192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002196:	bf00      	nop
 8002198:	51eb851f 	.word	0x51eb851f

0800219c <__errno>:
 800219c:	4b01      	ldr	r3, [pc, #4]	; (80021a4 <__errno+0x8>)
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	2000000c 	.word	0x2000000c

080021a8 <__libc_init_array>:
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	4d0d      	ldr	r5, [pc, #52]	; (80021e0 <__libc_init_array+0x38>)
 80021ac:	4c0d      	ldr	r4, [pc, #52]	; (80021e4 <__libc_init_array+0x3c>)
 80021ae:	1b64      	subs	r4, r4, r5
 80021b0:	10a4      	asrs	r4, r4, #2
 80021b2:	2600      	movs	r6, #0
 80021b4:	42a6      	cmp	r6, r4
 80021b6:	d109      	bne.n	80021cc <__libc_init_array+0x24>
 80021b8:	4d0b      	ldr	r5, [pc, #44]	; (80021e8 <__libc_init_array+0x40>)
 80021ba:	4c0c      	ldr	r4, [pc, #48]	; (80021ec <__libc_init_array+0x44>)
 80021bc:	f000 fd1e 	bl	8002bfc <_init>
 80021c0:	1b64      	subs	r4, r4, r5
 80021c2:	10a4      	asrs	r4, r4, #2
 80021c4:	2600      	movs	r6, #0
 80021c6:	42a6      	cmp	r6, r4
 80021c8:	d105      	bne.n	80021d6 <__libc_init_array+0x2e>
 80021ca:	bd70      	pop	{r4, r5, r6, pc}
 80021cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d0:	4798      	blx	r3
 80021d2:	3601      	adds	r6, #1
 80021d4:	e7ee      	b.n	80021b4 <__libc_init_array+0xc>
 80021d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021da:	4798      	blx	r3
 80021dc:	3601      	adds	r6, #1
 80021de:	e7f2      	b.n	80021c6 <__libc_init_array+0x1e>
 80021e0:	08002ccc 	.word	0x08002ccc
 80021e4:	08002ccc 	.word	0x08002ccc
 80021e8:	08002ccc 	.word	0x08002ccc
 80021ec:	08002cd0 	.word	0x08002cd0

080021f0 <memset>:
 80021f0:	4402      	add	r2, r0
 80021f2:	4603      	mov	r3, r0
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d100      	bne.n	80021fa <memset+0xa>
 80021f8:	4770      	bx	lr
 80021fa:	f803 1b01 	strb.w	r1, [r3], #1
 80021fe:	e7f9      	b.n	80021f4 <memset+0x4>

08002200 <_puts_r>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	460e      	mov	r6, r1
 8002204:	4605      	mov	r5, r0
 8002206:	b118      	cbz	r0, 8002210 <_puts_r+0x10>
 8002208:	6983      	ldr	r3, [r0, #24]
 800220a:	b90b      	cbnz	r3, 8002210 <_puts_r+0x10>
 800220c:	f000 fa48 	bl	80026a0 <__sinit>
 8002210:	69ab      	ldr	r3, [r5, #24]
 8002212:	68ac      	ldr	r4, [r5, #8]
 8002214:	b913      	cbnz	r3, 800221c <_puts_r+0x1c>
 8002216:	4628      	mov	r0, r5
 8002218:	f000 fa42 	bl	80026a0 <__sinit>
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <_puts_r+0xd0>)
 800221e:	429c      	cmp	r4, r3
 8002220:	d120      	bne.n	8002264 <_puts_r+0x64>
 8002222:	686c      	ldr	r4, [r5, #4]
 8002224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002226:	07db      	lsls	r3, r3, #31
 8002228:	d405      	bmi.n	8002236 <_puts_r+0x36>
 800222a:	89a3      	ldrh	r3, [r4, #12]
 800222c:	0598      	lsls	r0, r3, #22
 800222e:	d402      	bmi.n	8002236 <_puts_r+0x36>
 8002230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002232:	f000 fad3 	bl	80027dc <__retarget_lock_acquire_recursive>
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	0719      	lsls	r1, r3, #28
 800223a:	d51d      	bpl.n	8002278 <_puts_r+0x78>
 800223c:	6923      	ldr	r3, [r4, #16]
 800223e:	b1db      	cbz	r3, 8002278 <_puts_r+0x78>
 8002240:	3e01      	subs	r6, #1
 8002242:	68a3      	ldr	r3, [r4, #8]
 8002244:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002248:	3b01      	subs	r3, #1
 800224a:	60a3      	str	r3, [r4, #8]
 800224c:	bb39      	cbnz	r1, 800229e <_puts_r+0x9e>
 800224e:	2b00      	cmp	r3, #0
 8002250:	da38      	bge.n	80022c4 <_puts_r+0xc4>
 8002252:	4622      	mov	r2, r4
 8002254:	210a      	movs	r1, #10
 8002256:	4628      	mov	r0, r5
 8002258:	f000 f848 	bl	80022ec <__swbuf_r>
 800225c:	3001      	adds	r0, #1
 800225e:	d011      	beq.n	8002284 <_puts_r+0x84>
 8002260:	250a      	movs	r5, #10
 8002262:	e011      	b.n	8002288 <_puts_r+0x88>
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <_puts_r+0xd4>)
 8002266:	429c      	cmp	r4, r3
 8002268:	d101      	bne.n	800226e <_puts_r+0x6e>
 800226a:	68ac      	ldr	r4, [r5, #8]
 800226c:	e7da      	b.n	8002224 <_puts_r+0x24>
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <_puts_r+0xd8>)
 8002270:	429c      	cmp	r4, r3
 8002272:	bf08      	it	eq
 8002274:	68ec      	ldreq	r4, [r5, #12]
 8002276:	e7d5      	b.n	8002224 <_puts_r+0x24>
 8002278:	4621      	mov	r1, r4
 800227a:	4628      	mov	r0, r5
 800227c:	f000 f888 	bl	8002390 <__swsetup_r>
 8002280:	2800      	cmp	r0, #0
 8002282:	d0dd      	beq.n	8002240 <_puts_r+0x40>
 8002284:	f04f 35ff 	mov.w	r5, #4294967295
 8002288:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800228a:	07da      	lsls	r2, r3, #31
 800228c:	d405      	bmi.n	800229a <_puts_r+0x9a>
 800228e:	89a3      	ldrh	r3, [r4, #12]
 8002290:	059b      	lsls	r3, r3, #22
 8002292:	d402      	bmi.n	800229a <_puts_r+0x9a>
 8002294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002296:	f000 faa2 	bl	80027de <__retarget_lock_release_recursive>
 800229a:	4628      	mov	r0, r5
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	2b00      	cmp	r3, #0
 80022a0:	da04      	bge.n	80022ac <_puts_r+0xac>
 80022a2:	69a2      	ldr	r2, [r4, #24]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	dc06      	bgt.n	80022b6 <_puts_r+0xb6>
 80022a8:	290a      	cmp	r1, #10
 80022aa:	d004      	beq.n	80022b6 <_puts_r+0xb6>
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	6022      	str	r2, [r4, #0]
 80022b2:	7019      	strb	r1, [r3, #0]
 80022b4:	e7c5      	b.n	8002242 <_puts_r+0x42>
 80022b6:	4622      	mov	r2, r4
 80022b8:	4628      	mov	r0, r5
 80022ba:	f000 f817 	bl	80022ec <__swbuf_r>
 80022be:	3001      	adds	r0, #1
 80022c0:	d1bf      	bne.n	8002242 <_puts_r+0x42>
 80022c2:	e7df      	b.n	8002284 <_puts_r+0x84>
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	250a      	movs	r5, #10
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	6022      	str	r2, [r4, #0]
 80022cc:	701d      	strb	r5, [r3, #0]
 80022ce:	e7db      	b.n	8002288 <_puts_r+0x88>
 80022d0:	08002c84 	.word	0x08002c84
 80022d4:	08002ca4 	.word	0x08002ca4
 80022d8:	08002c64 	.word	0x08002c64

080022dc <puts>:
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <puts+0xc>)
 80022de:	4601      	mov	r1, r0
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	f7ff bf8d 	b.w	8002200 <_puts_r>
 80022e6:	bf00      	nop
 80022e8:	2000000c 	.word	0x2000000c

080022ec <__swbuf_r>:
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	460e      	mov	r6, r1
 80022f0:	4614      	mov	r4, r2
 80022f2:	4605      	mov	r5, r0
 80022f4:	b118      	cbz	r0, 80022fe <__swbuf_r+0x12>
 80022f6:	6983      	ldr	r3, [r0, #24]
 80022f8:	b90b      	cbnz	r3, 80022fe <__swbuf_r+0x12>
 80022fa:	f000 f9d1 	bl	80026a0 <__sinit>
 80022fe:	4b21      	ldr	r3, [pc, #132]	; (8002384 <__swbuf_r+0x98>)
 8002300:	429c      	cmp	r4, r3
 8002302:	d12b      	bne.n	800235c <__swbuf_r+0x70>
 8002304:	686c      	ldr	r4, [r5, #4]
 8002306:	69a3      	ldr	r3, [r4, #24]
 8002308:	60a3      	str	r3, [r4, #8]
 800230a:	89a3      	ldrh	r3, [r4, #12]
 800230c:	071a      	lsls	r2, r3, #28
 800230e:	d52f      	bpl.n	8002370 <__swbuf_r+0x84>
 8002310:	6923      	ldr	r3, [r4, #16]
 8002312:	b36b      	cbz	r3, 8002370 <__swbuf_r+0x84>
 8002314:	6923      	ldr	r3, [r4, #16]
 8002316:	6820      	ldr	r0, [r4, #0]
 8002318:	1ac0      	subs	r0, r0, r3
 800231a:	6963      	ldr	r3, [r4, #20]
 800231c:	b2f6      	uxtb	r6, r6
 800231e:	4283      	cmp	r3, r0
 8002320:	4637      	mov	r7, r6
 8002322:	dc04      	bgt.n	800232e <__swbuf_r+0x42>
 8002324:	4621      	mov	r1, r4
 8002326:	4628      	mov	r0, r5
 8002328:	f000 f926 	bl	8002578 <_fflush_r>
 800232c:	bb30      	cbnz	r0, 800237c <__swbuf_r+0x90>
 800232e:	68a3      	ldr	r3, [r4, #8]
 8002330:	3b01      	subs	r3, #1
 8002332:	60a3      	str	r3, [r4, #8]
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	6022      	str	r2, [r4, #0]
 800233a:	701e      	strb	r6, [r3, #0]
 800233c:	6963      	ldr	r3, [r4, #20]
 800233e:	3001      	adds	r0, #1
 8002340:	4283      	cmp	r3, r0
 8002342:	d004      	beq.n	800234e <__swbuf_r+0x62>
 8002344:	89a3      	ldrh	r3, [r4, #12]
 8002346:	07db      	lsls	r3, r3, #31
 8002348:	d506      	bpl.n	8002358 <__swbuf_r+0x6c>
 800234a:	2e0a      	cmp	r6, #10
 800234c:	d104      	bne.n	8002358 <__swbuf_r+0x6c>
 800234e:	4621      	mov	r1, r4
 8002350:	4628      	mov	r0, r5
 8002352:	f000 f911 	bl	8002578 <_fflush_r>
 8002356:	b988      	cbnz	r0, 800237c <__swbuf_r+0x90>
 8002358:	4638      	mov	r0, r7
 800235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <__swbuf_r+0x9c>)
 800235e:	429c      	cmp	r4, r3
 8002360:	d101      	bne.n	8002366 <__swbuf_r+0x7a>
 8002362:	68ac      	ldr	r4, [r5, #8]
 8002364:	e7cf      	b.n	8002306 <__swbuf_r+0x1a>
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <__swbuf_r+0xa0>)
 8002368:	429c      	cmp	r4, r3
 800236a:	bf08      	it	eq
 800236c:	68ec      	ldreq	r4, [r5, #12]
 800236e:	e7ca      	b.n	8002306 <__swbuf_r+0x1a>
 8002370:	4621      	mov	r1, r4
 8002372:	4628      	mov	r0, r5
 8002374:	f000 f80c 	bl	8002390 <__swsetup_r>
 8002378:	2800      	cmp	r0, #0
 800237a:	d0cb      	beq.n	8002314 <__swbuf_r+0x28>
 800237c:	f04f 37ff 	mov.w	r7, #4294967295
 8002380:	e7ea      	b.n	8002358 <__swbuf_r+0x6c>
 8002382:	bf00      	nop
 8002384:	08002c84 	.word	0x08002c84
 8002388:	08002ca4 	.word	0x08002ca4
 800238c:	08002c64 	.word	0x08002c64

08002390 <__swsetup_r>:
 8002390:	4b32      	ldr	r3, [pc, #200]	; (800245c <__swsetup_r+0xcc>)
 8002392:	b570      	push	{r4, r5, r6, lr}
 8002394:	681d      	ldr	r5, [r3, #0]
 8002396:	4606      	mov	r6, r0
 8002398:	460c      	mov	r4, r1
 800239a:	b125      	cbz	r5, 80023a6 <__swsetup_r+0x16>
 800239c:	69ab      	ldr	r3, [r5, #24]
 800239e:	b913      	cbnz	r3, 80023a6 <__swsetup_r+0x16>
 80023a0:	4628      	mov	r0, r5
 80023a2:	f000 f97d 	bl	80026a0 <__sinit>
 80023a6:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <__swsetup_r+0xd0>)
 80023a8:	429c      	cmp	r4, r3
 80023aa:	d10f      	bne.n	80023cc <__swsetup_r+0x3c>
 80023ac:	686c      	ldr	r4, [r5, #4]
 80023ae:	89a3      	ldrh	r3, [r4, #12]
 80023b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023b4:	0719      	lsls	r1, r3, #28
 80023b6:	d42c      	bmi.n	8002412 <__swsetup_r+0x82>
 80023b8:	06dd      	lsls	r5, r3, #27
 80023ba:	d411      	bmi.n	80023e0 <__swsetup_r+0x50>
 80023bc:	2309      	movs	r3, #9
 80023be:	6033      	str	r3, [r6, #0]
 80023c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80023c4:	81a3      	strh	r3, [r4, #12]
 80023c6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ca:	e03e      	b.n	800244a <__swsetup_r+0xba>
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <__swsetup_r+0xd4>)
 80023ce:	429c      	cmp	r4, r3
 80023d0:	d101      	bne.n	80023d6 <__swsetup_r+0x46>
 80023d2:	68ac      	ldr	r4, [r5, #8]
 80023d4:	e7eb      	b.n	80023ae <__swsetup_r+0x1e>
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <__swsetup_r+0xd8>)
 80023d8:	429c      	cmp	r4, r3
 80023da:	bf08      	it	eq
 80023dc:	68ec      	ldreq	r4, [r5, #12]
 80023de:	e7e6      	b.n	80023ae <__swsetup_r+0x1e>
 80023e0:	0758      	lsls	r0, r3, #29
 80023e2:	d512      	bpl.n	800240a <__swsetup_r+0x7a>
 80023e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023e6:	b141      	cbz	r1, 80023fa <__swsetup_r+0x6a>
 80023e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023ec:	4299      	cmp	r1, r3
 80023ee:	d002      	beq.n	80023f6 <__swsetup_r+0x66>
 80023f0:	4630      	mov	r0, r6
 80023f2:	f000 fa5b 	bl	80028ac <_free_r>
 80023f6:	2300      	movs	r3, #0
 80023f8:	6363      	str	r3, [r4, #52]	; 0x34
 80023fa:	89a3      	ldrh	r3, [r4, #12]
 80023fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002400:	81a3      	strh	r3, [r4, #12]
 8002402:	2300      	movs	r3, #0
 8002404:	6063      	str	r3, [r4, #4]
 8002406:	6923      	ldr	r3, [r4, #16]
 8002408:	6023      	str	r3, [r4, #0]
 800240a:	89a3      	ldrh	r3, [r4, #12]
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	81a3      	strh	r3, [r4, #12]
 8002412:	6923      	ldr	r3, [r4, #16]
 8002414:	b94b      	cbnz	r3, 800242a <__swsetup_r+0x9a>
 8002416:	89a3      	ldrh	r3, [r4, #12]
 8002418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800241c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002420:	d003      	beq.n	800242a <__swsetup_r+0x9a>
 8002422:	4621      	mov	r1, r4
 8002424:	4630      	mov	r0, r6
 8002426:	f000 fa01 	bl	800282c <__smakebuf_r>
 800242a:	89a0      	ldrh	r0, [r4, #12]
 800242c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002430:	f010 0301 	ands.w	r3, r0, #1
 8002434:	d00a      	beq.n	800244c <__swsetup_r+0xbc>
 8002436:	2300      	movs	r3, #0
 8002438:	60a3      	str	r3, [r4, #8]
 800243a:	6963      	ldr	r3, [r4, #20]
 800243c:	425b      	negs	r3, r3
 800243e:	61a3      	str	r3, [r4, #24]
 8002440:	6923      	ldr	r3, [r4, #16]
 8002442:	b943      	cbnz	r3, 8002456 <__swsetup_r+0xc6>
 8002444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002448:	d1ba      	bne.n	80023c0 <__swsetup_r+0x30>
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	0781      	lsls	r1, r0, #30
 800244e:	bf58      	it	pl
 8002450:	6963      	ldrpl	r3, [r4, #20]
 8002452:	60a3      	str	r3, [r4, #8]
 8002454:	e7f4      	b.n	8002440 <__swsetup_r+0xb0>
 8002456:	2000      	movs	r0, #0
 8002458:	e7f7      	b.n	800244a <__swsetup_r+0xba>
 800245a:	bf00      	nop
 800245c:	2000000c 	.word	0x2000000c
 8002460:	08002c84 	.word	0x08002c84
 8002464:	08002ca4 	.word	0x08002ca4
 8002468:	08002c64 	.word	0x08002c64

0800246c <__sflush_r>:
 800246c:	898a      	ldrh	r2, [r1, #12]
 800246e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002472:	4605      	mov	r5, r0
 8002474:	0710      	lsls	r0, r2, #28
 8002476:	460c      	mov	r4, r1
 8002478:	d458      	bmi.n	800252c <__sflush_r+0xc0>
 800247a:	684b      	ldr	r3, [r1, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	dc05      	bgt.n	800248c <__sflush_r+0x20>
 8002480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	dc02      	bgt.n	800248c <__sflush_r+0x20>
 8002486:	2000      	movs	r0, #0
 8002488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800248c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800248e:	2e00      	cmp	r6, #0
 8002490:	d0f9      	beq.n	8002486 <__sflush_r+0x1a>
 8002492:	2300      	movs	r3, #0
 8002494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002498:	682f      	ldr	r7, [r5, #0]
 800249a:	602b      	str	r3, [r5, #0]
 800249c:	d032      	beq.n	8002504 <__sflush_r+0x98>
 800249e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024a0:	89a3      	ldrh	r3, [r4, #12]
 80024a2:	075a      	lsls	r2, r3, #29
 80024a4:	d505      	bpl.n	80024b2 <__sflush_r+0x46>
 80024a6:	6863      	ldr	r3, [r4, #4]
 80024a8:	1ac0      	subs	r0, r0, r3
 80024aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024ac:	b10b      	cbz	r3, 80024b2 <__sflush_r+0x46>
 80024ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024b0:	1ac0      	subs	r0, r0, r3
 80024b2:	2300      	movs	r3, #0
 80024b4:	4602      	mov	r2, r0
 80024b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024b8:	6a21      	ldr	r1, [r4, #32]
 80024ba:	4628      	mov	r0, r5
 80024bc:	47b0      	blx	r6
 80024be:	1c43      	adds	r3, r0, #1
 80024c0:	89a3      	ldrh	r3, [r4, #12]
 80024c2:	d106      	bne.n	80024d2 <__sflush_r+0x66>
 80024c4:	6829      	ldr	r1, [r5, #0]
 80024c6:	291d      	cmp	r1, #29
 80024c8:	d82c      	bhi.n	8002524 <__sflush_r+0xb8>
 80024ca:	4a2a      	ldr	r2, [pc, #168]	; (8002574 <__sflush_r+0x108>)
 80024cc:	40ca      	lsrs	r2, r1
 80024ce:	07d6      	lsls	r6, r2, #31
 80024d0:	d528      	bpl.n	8002524 <__sflush_r+0xb8>
 80024d2:	2200      	movs	r2, #0
 80024d4:	6062      	str	r2, [r4, #4]
 80024d6:	04d9      	lsls	r1, r3, #19
 80024d8:	6922      	ldr	r2, [r4, #16]
 80024da:	6022      	str	r2, [r4, #0]
 80024dc:	d504      	bpl.n	80024e8 <__sflush_r+0x7c>
 80024de:	1c42      	adds	r2, r0, #1
 80024e0:	d101      	bne.n	80024e6 <__sflush_r+0x7a>
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	b903      	cbnz	r3, 80024e8 <__sflush_r+0x7c>
 80024e6:	6560      	str	r0, [r4, #84]	; 0x54
 80024e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024ea:	602f      	str	r7, [r5, #0]
 80024ec:	2900      	cmp	r1, #0
 80024ee:	d0ca      	beq.n	8002486 <__sflush_r+0x1a>
 80024f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024f4:	4299      	cmp	r1, r3
 80024f6:	d002      	beq.n	80024fe <__sflush_r+0x92>
 80024f8:	4628      	mov	r0, r5
 80024fa:	f000 f9d7 	bl	80028ac <_free_r>
 80024fe:	2000      	movs	r0, #0
 8002500:	6360      	str	r0, [r4, #52]	; 0x34
 8002502:	e7c1      	b.n	8002488 <__sflush_r+0x1c>
 8002504:	6a21      	ldr	r1, [r4, #32]
 8002506:	2301      	movs	r3, #1
 8002508:	4628      	mov	r0, r5
 800250a:	47b0      	blx	r6
 800250c:	1c41      	adds	r1, r0, #1
 800250e:	d1c7      	bne.n	80024a0 <__sflush_r+0x34>
 8002510:	682b      	ldr	r3, [r5, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0c4      	beq.n	80024a0 <__sflush_r+0x34>
 8002516:	2b1d      	cmp	r3, #29
 8002518:	d001      	beq.n	800251e <__sflush_r+0xb2>
 800251a:	2b16      	cmp	r3, #22
 800251c:	d101      	bne.n	8002522 <__sflush_r+0xb6>
 800251e:	602f      	str	r7, [r5, #0]
 8002520:	e7b1      	b.n	8002486 <__sflush_r+0x1a>
 8002522:	89a3      	ldrh	r3, [r4, #12]
 8002524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002528:	81a3      	strh	r3, [r4, #12]
 800252a:	e7ad      	b.n	8002488 <__sflush_r+0x1c>
 800252c:	690f      	ldr	r7, [r1, #16]
 800252e:	2f00      	cmp	r7, #0
 8002530:	d0a9      	beq.n	8002486 <__sflush_r+0x1a>
 8002532:	0793      	lsls	r3, r2, #30
 8002534:	680e      	ldr	r6, [r1, #0]
 8002536:	bf08      	it	eq
 8002538:	694b      	ldreq	r3, [r1, #20]
 800253a:	600f      	str	r7, [r1, #0]
 800253c:	bf18      	it	ne
 800253e:	2300      	movne	r3, #0
 8002540:	eba6 0807 	sub.w	r8, r6, r7
 8002544:	608b      	str	r3, [r1, #8]
 8002546:	f1b8 0f00 	cmp.w	r8, #0
 800254a:	dd9c      	ble.n	8002486 <__sflush_r+0x1a>
 800254c:	6a21      	ldr	r1, [r4, #32]
 800254e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002550:	4643      	mov	r3, r8
 8002552:	463a      	mov	r2, r7
 8002554:	4628      	mov	r0, r5
 8002556:	47b0      	blx	r6
 8002558:	2800      	cmp	r0, #0
 800255a:	dc06      	bgt.n	800256a <__sflush_r+0xfe>
 800255c:	89a3      	ldrh	r3, [r4, #12]
 800255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002562:	81a3      	strh	r3, [r4, #12]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	e78e      	b.n	8002488 <__sflush_r+0x1c>
 800256a:	4407      	add	r7, r0
 800256c:	eba8 0800 	sub.w	r8, r8, r0
 8002570:	e7e9      	b.n	8002546 <__sflush_r+0xda>
 8002572:	bf00      	nop
 8002574:	20400001 	.word	0x20400001

08002578 <_fflush_r>:
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	690b      	ldr	r3, [r1, #16]
 800257c:	4605      	mov	r5, r0
 800257e:	460c      	mov	r4, r1
 8002580:	b913      	cbnz	r3, 8002588 <_fflush_r+0x10>
 8002582:	2500      	movs	r5, #0
 8002584:	4628      	mov	r0, r5
 8002586:	bd38      	pop	{r3, r4, r5, pc}
 8002588:	b118      	cbz	r0, 8002592 <_fflush_r+0x1a>
 800258a:	6983      	ldr	r3, [r0, #24]
 800258c:	b90b      	cbnz	r3, 8002592 <_fflush_r+0x1a>
 800258e:	f000 f887 	bl	80026a0 <__sinit>
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <_fflush_r+0x6c>)
 8002594:	429c      	cmp	r4, r3
 8002596:	d11b      	bne.n	80025d0 <_fflush_r+0x58>
 8002598:	686c      	ldr	r4, [r5, #4]
 800259a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0ef      	beq.n	8002582 <_fflush_r+0xa>
 80025a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80025a4:	07d0      	lsls	r0, r2, #31
 80025a6:	d404      	bmi.n	80025b2 <_fflush_r+0x3a>
 80025a8:	0599      	lsls	r1, r3, #22
 80025aa:	d402      	bmi.n	80025b2 <_fflush_r+0x3a>
 80025ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025ae:	f000 f915 	bl	80027dc <__retarget_lock_acquire_recursive>
 80025b2:	4628      	mov	r0, r5
 80025b4:	4621      	mov	r1, r4
 80025b6:	f7ff ff59 	bl	800246c <__sflush_r>
 80025ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025bc:	07da      	lsls	r2, r3, #31
 80025be:	4605      	mov	r5, r0
 80025c0:	d4e0      	bmi.n	8002584 <_fflush_r+0xc>
 80025c2:	89a3      	ldrh	r3, [r4, #12]
 80025c4:	059b      	lsls	r3, r3, #22
 80025c6:	d4dd      	bmi.n	8002584 <_fflush_r+0xc>
 80025c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025ca:	f000 f908 	bl	80027de <__retarget_lock_release_recursive>
 80025ce:	e7d9      	b.n	8002584 <_fflush_r+0xc>
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <_fflush_r+0x70>)
 80025d2:	429c      	cmp	r4, r3
 80025d4:	d101      	bne.n	80025da <_fflush_r+0x62>
 80025d6:	68ac      	ldr	r4, [r5, #8]
 80025d8:	e7df      	b.n	800259a <_fflush_r+0x22>
 80025da:	4b04      	ldr	r3, [pc, #16]	; (80025ec <_fflush_r+0x74>)
 80025dc:	429c      	cmp	r4, r3
 80025de:	bf08      	it	eq
 80025e0:	68ec      	ldreq	r4, [r5, #12]
 80025e2:	e7da      	b.n	800259a <_fflush_r+0x22>
 80025e4:	08002c84 	.word	0x08002c84
 80025e8:	08002ca4 	.word	0x08002ca4
 80025ec:	08002c64 	.word	0x08002c64

080025f0 <std>:
 80025f0:	2300      	movs	r3, #0
 80025f2:	b510      	push	{r4, lr}
 80025f4:	4604      	mov	r4, r0
 80025f6:	e9c0 3300 	strd	r3, r3, [r0]
 80025fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025fe:	6083      	str	r3, [r0, #8]
 8002600:	8181      	strh	r1, [r0, #12]
 8002602:	6643      	str	r3, [r0, #100]	; 0x64
 8002604:	81c2      	strh	r2, [r0, #14]
 8002606:	6183      	str	r3, [r0, #24]
 8002608:	4619      	mov	r1, r3
 800260a:	2208      	movs	r2, #8
 800260c:	305c      	adds	r0, #92	; 0x5c
 800260e:	f7ff fdef 	bl	80021f0 <memset>
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <std+0x38>)
 8002614:	6263      	str	r3, [r4, #36]	; 0x24
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <std+0x3c>)
 8002618:	62a3      	str	r3, [r4, #40]	; 0x28
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <std+0x40>)
 800261c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <std+0x44>)
 8002620:	6224      	str	r4, [r4, #32]
 8002622:	6323      	str	r3, [r4, #48]	; 0x30
 8002624:	bd10      	pop	{r4, pc}
 8002626:	bf00      	nop
 8002628:	08002a8d 	.word	0x08002a8d
 800262c:	08002aaf 	.word	0x08002aaf
 8002630:	08002ae7 	.word	0x08002ae7
 8002634:	08002b0b 	.word	0x08002b0b

08002638 <_cleanup_r>:
 8002638:	4901      	ldr	r1, [pc, #4]	; (8002640 <_cleanup_r+0x8>)
 800263a:	f000 b8af 	b.w	800279c <_fwalk_reent>
 800263e:	bf00      	nop
 8002640:	08002579 	.word	0x08002579

08002644 <__sfmoreglue>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	2268      	movs	r2, #104	; 0x68
 8002648:	1e4d      	subs	r5, r1, #1
 800264a:	4355      	muls	r5, r2
 800264c:	460e      	mov	r6, r1
 800264e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002652:	f000 f997 	bl	8002984 <_malloc_r>
 8002656:	4604      	mov	r4, r0
 8002658:	b140      	cbz	r0, 800266c <__sfmoreglue+0x28>
 800265a:	2100      	movs	r1, #0
 800265c:	e9c0 1600 	strd	r1, r6, [r0]
 8002660:	300c      	adds	r0, #12
 8002662:	60a0      	str	r0, [r4, #8]
 8002664:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002668:	f7ff fdc2 	bl	80021f0 <memset>
 800266c:	4620      	mov	r0, r4
 800266e:	bd70      	pop	{r4, r5, r6, pc}

08002670 <__sfp_lock_acquire>:
 8002670:	4801      	ldr	r0, [pc, #4]	; (8002678 <__sfp_lock_acquire+0x8>)
 8002672:	f000 b8b3 	b.w	80027dc <__retarget_lock_acquire_recursive>
 8002676:	bf00      	nop
 8002678:	200000d9 	.word	0x200000d9

0800267c <__sfp_lock_release>:
 800267c:	4801      	ldr	r0, [pc, #4]	; (8002684 <__sfp_lock_release+0x8>)
 800267e:	f000 b8ae 	b.w	80027de <__retarget_lock_release_recursive>
 8002682:	bf00      	nop
 8002684:	200000d9 	.word	0x200000d9

08002688 <__sinit_lock_acquire>:
 8002688:	4801      	ldr	r0, [pc, #4]	; (8002690 <__sinit_lock_acquire+0x8>)
 800268a:	f000 b8a7 	b.w	80027dc <__retarget_lock_acquire_recursive>
 800268e:	bf00      	nop
 8002690:	200000da 	.word	0x200000da

08002694 <__sinit_lock_release>:
 8002694:	4801      	ldr	r0, [pc, #4]	; (800269c <__sinit_lock_release+0x8>)
 8002696:	f000 b8a2 	b.w	80027de <__retarget_lock_release_recursive>
 800269a:	bf00      	nop
 800269c:	200000da 	.word	0x200000da

080026a0 <__sinit>:
 80026a0:	b510      	push	{r4, lr}
 80026a2:	4604      	mov	r4, r0
 80026a4:	f7ff fff0 	bl	8002688 <__sinit_lock_acquire>
 80026a8:	69a3      	ldr	r3, [r4, #24]
 80026aa:	b11b      	cbz	r3, 80026b4 <__sinit+0x14>
 80026ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026b0:	f7ff bff0 	b.w	8002694 <__sinit_lock_release>
 80026b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80026b8:	6523      	str	r3, [r4, #80]	; 0x50
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <__sinit+0x68>)
 80026bc:	4a13      	ldr	r2, [pc, #76]	; (800270c <__sinit+0x6c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80026c2:	42a3      	cmp	r3, r4
 80026c4:	bf04      	itt	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	61a3      	streq	r3, [r4, #24]
 80026ca:	4620      	mov	r0, r4
 80026cc:	f000 f820 	bl	8002710 <__sfp>
 80026d0:	6060      	str	r0, [r4, #4]
 80026d2:	4620      	mov	r0, r4
 80026d4:	f000 f81c 	bl	8002710 <__sfp>
 80026d8:	60a0      	str	r0, [r4, #8]
 80026da:	4620      	mov	r0, r4
 80026dc:	f000 f818 	bl	8002710 <__sfp>
 80026e0:	2200      	movs	r2, #0
 80026e2:	60e0      	str	r0, [r4, #12]
 80026e4:	2104      	movs	r1, #4
 80026e6:	6860      	ldr	r0, [r4, #4]
 80026e8:	f7ff ff82 	bl	80025f0 <std>
 80026ec:	68a0      	ldr	r0, [r4, #8]
 80026ee:	2201      	movs	r2, #1
 80026f0:	2109      	movs	r1, #9
 80026f2:	f7ff ff7d 	bl	80025f0 <std>
 80026f6:	68e0      	ldr	r0, [r4, #12]
 80026f8:	2202      	movs	r2, #2
 80026fa:	2112      	movs	r1, #18
 80026fc:	f7ff ff78 	bl	80025f0 <std>
 8002700:	2301      	movs	r3, #1
 8002702:	61a3      	str	r3, [r4, #24]
 8002704:	e7d2      	b.n	80026ac <__sinit+0xc>
 8002706:	bf00      	nop
 8002708:	08002c60 	.word	0x08002c60
 800270c:	08002639 	.word	0x08002639

08002710 <__sfp>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	4607      	mov	r7, r0
 8002714:	f7ff ffac 	bl	8002670 <__sfp_lock_acquire>
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <__sfp+0x84>)
 800271a:	681e      	ldr	r6, [r3, #0]
 800271c:	69b3      	ldr	r3, [r6, #24]
 800271e:	b913      	cbnz	r3, 8002726 <__sfp+0x16>
 8002720:	4630      	mov	r0, r6
 8002722:	f7ff ffbd 	bl	80026a0 <__sinit>
 8002726:	3648      	adds	r6, #72	; 0x48
 8002728:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800272c:	3b01      	subs	r3, #1
 800272e:	d503      	bpl.n	8002738 <__sfp+0x28>
 8002730:	6833      	ldr	r3, [r6, #0]
 8002732:	b30b      	cbz	r3, 8002778 <__sfp+0x68>
 8002734:	6836      	ldr	r6, [r6, #0]
 8002736:	e7f7      	b.n	8002728 <__sfp+0x18>
 8002738:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800273c:	b9d5      	cbnz	r5, 8002774 <__sfp+0x64>
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <__sfp+0x88>)
 8002740:	60e3      	str	r3, [r4, #12]
 8002742:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002746:	6665      	str	r5, [r4, #100]	; 0x64
 8002748:	f000 f847 	bl	80027da <__retarget_lock_init_recursive>
 800274c:	f7ff ff96 	bl	800267c <__sfp_lock_release>
 8002750:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002754:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002758:	6025      	str	r5, [r4, #0]
 800275a:	61a5      	str	r5, [r4, #24]
 800275c:	2208      	movs	r2, #8
 800275e:	4629      	mov	r1, r5
 8002760:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002764:	f7ff fd44 	bl	80021f0 <memset>
 8002768:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800276c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002770:	4620      	mov	r0, r4
 8002772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002774:	3468      	adds	r4, #104	; 0x68
 8002776:	e7d9      	b.n	800272c <__sfp+0x1c>
 8002778:	2104      	movs	r1, #4
 800277a:	4638      	mov	r0, r7
 800277c:	f7ff ff62 	bl	8002644 <__sfmoreglue>
 8002780:	4604      	mov	r4, r0
 8002782:	6030      	str	r0, [r6, #0]
 8002784:	2800      	cmp	r0, #0
 8002786:	d1d5      	bne.n	8002734 <__sfp+0x24>
 8002788:	f7ff ff78 	bl	800267c <__sfp_lock_release>
 800278c:	230c      	movs	r3, #12
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	e7ee      	b.n	8002770 <__sfp+0x60>
 8002792:	bf00      	nop
 8002794:	08002c60 	.word	0x08002c60
 8002798:	ffff0001 	.word	0xffff0001

0800279c <_fwalk_reent>:
 800279c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a0:	4606      	mov	r6, r0
 80027a2:	4688      	mov	r8, r1
 80027a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80027a8:	2700      	movs	r7, #0
 80027aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027ae:	f1b9 0901 	subs.w	r9, r9, #1
 80027b2:	d505      	bpl.n	80027c0 <_fwalk_reent+0x24>
 80027b4:	6824      	ldr	r4, [r4, #0]
 80027b6:	2c00      	cmp	r4, #0
 80027b8:	d1f7      	bne.n	80027aa <_fwalk_reent+0xe>
 80027ba:	4638      	mov	r0, r7
 80027bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027c0:	89ab      	ldrh	r3, [r5, #12]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d907      	bls.n	80027d6 <_fwalk_reent+0x3a>
 80027c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027ca:	3301      	adds	r3, #1
 80027cc:	d003      	beq.n	80027d6 <_fwalk_reent+0x3a>
 80027ce:	4629      	mov	r1, r5
 80027d0:	4630      	mov	r0, r6
 80027d2:	47c0      	blx	r8
 80027d4:	4307      	orrs	r7, r0
 80027d6:	3568      	adds	r5, #104	; 0x68
 80027d8:	e7e9      	b.n	80027ae <_fwalk_reent+0x12>

080027da <__retarget_lock_init_recursive>:
 80027da:	4770      	bx	lr

080027dc <__retarget_lock_acquire_recursive>:
 80027dc:	4770      	bx	lr

080027de <__retarget_lock_release_recursive>:
 80027de:	4770      	bx	lr

080027e0 <__swhatbuf_r>:
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	460e      	mov	r6, r1
 80027e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027e8:	2900      	cmp	r1, #0
 80027ea:	b096      	sub	sp, #88	; 0x58
 80027ec:	4614      	mov	r4, r2
 80027ee:	461d      	mov	r5, r3
 80027f0:	da08      	bge.n	8002804 <__swhatbuf_r+0x24>
 80027f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	602a      	str	r2, [r5, #0]
 80027fa:	061a      	lsls	r2, r3, #24
 80027fc:	d410      	bmi.n	8002820 <__swhatbuf_r+0x40>
 80027fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002802:	e00e      	b.n	8002822 <__swhatbuf_r+0x42>
 8002804:	466a      	mov	r2, sp
 8002806:	f000 f9a7 	bl	8002b58 <_fstat_r>
 800280a:	2800      	cmp	r0, #0
 800280c:	dbf1      	blt.n	80027f2 <__swhatbuf_r+0x12>
 800280e:	9a01      	ldr	r2, [sp, #4]
 8002810:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002814:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002818:	425a      	negs	r2, r3
 800281a:	415a      	adcs	r2, r3
 800281c:	602a      	str	r2, [r5, #0]
 800281e:	e7ee      	b.n	80027fe <__swhatbuf_r+0x1e>
 8002820:	2340      	movs	r3, #64	; 0x40
 8002822:	2000      	movs	r0, #0
 8002824:	6023      	str	r3, [r4, #0]
 8002826:	b016      	add	sp, #88	; 0x58
 8002828:	bd70      	pop	{r4, r5, r6, pc}
	...

0800282c <__smakebuf_r>:
 800282c:	898b      	ldrh	r3, [r1, #12]
 800282e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002830:	079d      	lsls	r5, r3, #30
 8002832:	4606      	mov	r6, r0
 8002834:	460c      	mov	r4, r1
 8002836:	d507      	bpl.n	8002848 <__smakebuf_r+0x1c>
 8002838:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800283c:	6023      	str	r3, [r4, #0]
 800283e:	6123      	str	r3, [r4, #16]
 8002840:	2301      	movs	r3, #1
 8002842:	6163      	str	r3, [r4, #20]
 8002844:	b002      	add	sp, #8
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	ab01      	add	r3, sp, #4
 800284a:	466a      	mov	r2, sp
 800284c:	f7ff ffc8 	bl	80027e0 <__swhatbuf_r>
 8002850:	9900      	ldr	r1, [sp, #0]
 8002852:	4605      	mov	r5, r0
 8002854:	4630      	mov	r0, r6
 8002856:	f000 f895 	bl	8002984 <_malloc_r>
 800285a:	b948      	cbnz	r0, 8002870 <__smakebuf_r+0x44>
 800285c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002860:	059a      	lsls	r2, r3, #22
 8002862:	d4ef      	bmi.n	8002844 <__smakebuf_r+0x18>
 8002864:	f023 0303 	bic.w	r3, r3, #3
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	81a3      	strh	r3, [r4, #12]
 800286e:	e7e3      	b.n	8002838 <__smakebuf_r+0xc>
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <__smakebuf_r+0x7c>)
 8002872:	62b3      	str	r3, [r6, #40]	; 0x28
 8002874:	89a3      	ldrh	r3, [r4, #12]
 8002876:	6020      	str	r0, [r4, #0]
 8002878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287c:	81a3      	strh	r3, [r4, #12]
 800287e:	9b00      	ldr	r3, [sp, #0]
 8002880:	6163      	str	r3, [r4, #20]
 8002882:	9b01      	ldr	r3, [sp, #4]
 8002884:	6120      	str	r0, [r4, #16]
 8002886:	b15b      	cbz	r3, 80028a0 <__smakebuf_r+0x74>
 8002888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800288c:	4630      	mov	r0, r6
 800288e:	f000 f975 	bl	8002b7c <_isatty_r>
 8002892:	b128      	cbz	r0, 80028a0 <__smakebuf_r+0x74>
 8002894:	89a3      	ldrh	r3, [r4, #12]
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	81a3      	strh	r3, [r4, #12]
 80028a0:	89a0      	ldrh	r0, [r4, #12]
 80028a2:	4305      	orrs	r5, r0
 80028a4:	81a5      	strh	r5, [r4, #12]
 80028a6:	e7cd      	b.n	8002844 <__smakebuf_r+0x18>
 80028a8:	08002639 	.word	0x08002639

080028ac <_free_r>:
 80028ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028ae:	2900      	cmp	r1, #0
 80028b0:	d044      	beq.n	800293c <_free_r+0x90>
 80028b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028b6:	9001      	str	r0, [sp, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f1a1 0404 	sub.w	r4, r1, #4
 80028be:	bfb8      	it	lt
 80028c0:	18e4      	addlt	r4, r4, r3
 80028c2:	f000 f97d 	bl	8002bc0 <__malloc_lock>
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <_free_r+0x94>)
 80028c8:	9801      	ldr	r0, [sp, #4]
 80028ca:	6813      	ldr	r3, [r2, #0]
 80028cc:	b933      	cbnz	r3, 80028dc <_free_r+0x30>
 80028ce:	6063      	str	r3, [r4, #4]
 80028d0:	6014      	str	r4, [r2, #0]
 80028d2:	b003      	add	sp, #12
 80028d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028d8:	f000 b978 	b.w	8002bcc <__malloc_unlock>
 80028dc:	42a3      	cmp	r3, r4
 80028de:	d908      	bls.n	80028f2 <_free_r+0x46>
 80028e0:	6825      	ldr	r5, [r4, #0]
 80028e2:	1961      	adds	r1, r4, r5
 80028e4:	428b      	cmp	r3, r1
 80028e6:	bf01      	itttt	eq
 80028e8:	6819      	ldreq	r1, [r3, #0]
 80028ea:	685b      	ldreq	r3, [r3, #4]
 80028ec:	1949      	addeq	r1, r1, r5
 80028ee:	6021      	streq	r1, [r4, #0]
 80028f0:	e7ed      	b.n	80028ce <_free_r+0x22>
 80028f2:	461a      	mov	r2, r3
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	b10b      	cbz	r3, 80028fc <_free_r+0x50>
 80028f8:	42a3      	cmp	r3, r4
 80028fa:	d9fa      	bls.n	80028f2 <_free_r+0x46>
 80028fc:	6811      	ldr	r1, [r2, #0]
 80028fe:	1855      	adds	r5, r2, r1
 8002900:	42a5      	cmp	r5, r4
 8002902:	d10b      	bne.n	800291c <_free_r+0x70>
 8002904:	6824      	ldr	r4, [r4, #0]
 8002906:	4421      	add	r1, r4
 8002908:	1854      	adds	r4, r2, r1
 800290a:	42a3      	cmp	r3, r4
 800290c:	6011      	str	r1, [r2, #0]
 800290e:	d1e0      	bne.n	80028d2 <_free_r+0x26>
 8002910:	681c      	ldr	r4, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	6053      	str	r3, [r2, #4]
 8002916:	4421      	add	r1, r4
 8002918:	6011      	str	r1, [r2, #0]
 800291a:	e7da      	b.n	80028d2 <_free_r+0x26>
 800291c:	d902      	bls.n	8002924 <_free_r+0x78>
 800291e:	230c      	movs	r3, #12
 8002920:	6003      	str	r3, [r0, #0]
 8002922:	e7d6      	b.n	80028d2 <_free_r+0x26>
 8002924:	6825      	ldr	r5, [r4, #0]
 8002926:	1961      	adds	r1, r4, r5
 8002928:	428b      	cmp	r3, r1
 800292a:	bf04      	itt	eq
 800292c:	6819      	ldreq	r1, [r3, #0]
 800292e:	685b      	ldreq	r3, [r3, #4]
 8002930:	6063      	str	r3, [r4, #4]
 8002932:	bf04      	itt	eq
 8002934:	1949      	addeq	r1, r1, r5
 8002936:	6021      	streq	r1, [r4, #0]
 8002938:	6054      	str	r4, [r2, #4]
 800293a:	e7ca      	b.n	80028d2 <_free_r+0x26>
 800293c:	b003      	add	sp, #12
 800293e:	bd30      	pop	{r4, r5, pc}
 8002940:	200000dc 	.word	0x200000dc

08002944 <sbrk_aligned>:
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	4e0e      	ldr	r6, [pc, #56]	; (8002980 <sbrk_aligned+0x3c>)
 8002948:	460c      	mov	r4, r1
 800294a:	6831      	ldr	r1, [r6, #0]
 800294c:	4605      	mov	r5, r0
 800294e:	b911      	cbnz	r1, 8002956 <sbrk_aligned+0x12>
 8002950:	f000 f88c 	bl	8002a6c <_sbrk_r>
 8002954:	6030      	str	r0, [r6, #0]
 8002956:	4621      	mov	r1, r4
 8002958:	4628      	mov	r0, r5
 800295a:	f000 f887 	bl	8002a6c <_sbrk_r>
 800295e:	1c43      	adds	r3, r0, #1
 8002960:	d00a      	beq.n	8002978 <sbrk_aligned+0x34>
 8002962:	1cc4      	adds	r4, r0, #3
 8002964:	f024 0403 	bic.w	r4, r4, #3
 8002968:	42a0      	cmp	r0, r4
 800296a:	d007      	beq.n	800297c <sbrk_aligned+0x38>
 800296c:	1a21      	subs	r1, r4, r0
 800296e:	4628      	mov	r0, r5
 8002970:	f000 f87c 	bl	8002a6c <_sbrk_r>
 8002974:	3001      	adds	r0, #1
 8002976:	d101      	bne.n	800297c <sbrk_aligned+0x38>
 8002978:	f04f 34ff 	mov.w	r4, #4294967295
 800297c:	4620      	mov	r0, r4
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	200000e0 	.word	0x200000e0

08002984 <_malloc_r>:
 8002984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002988:	1ccd      	adds	r5, r1, #3
 800298a:	f025 0503 	bic.w	r5, r5, #3
 800298e:	3508      	adds	r5, #8
 8002990:	2d0c      	cmp	r5, #12
 8002992:	bf38      	it	cc
 8002994:	250c      	movcc	r5, #12
 8002996:	2d00      	cmp	r5, #0
 8002998:	4607      	mov	r7, r0
 800299a:	db01      	blt.n	80029a0 <_malloc_r+0x1c>
 800299c:	42a9      	cmp	r1, r5
 800299e:	d905      	bls.n	80029ac <_malloc_r+0x28>
 80029a0:	230c      	movs	r3, #12
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	2600      	movs	r6, #0
 80029a6:	4630      	mov	r0, r6
 80029a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029ac:	4e2e      	ldr	r6, [pc, #184]	; (8002a68 <_malloc_r+0xe4>)
 80029ae:	f000 f907 	bl	8002bc0 <__malloc_lock>
 80029b2:	6833      	ldr	r3, [r6, #0]
 80029b4:	461c      	mov	r4, r3
 80029b6:	bb34      	cbnz	r4, 8002a06 <_malloc_r+0x82>
 80029b8:	4629      	mov	r1, r5
 80029ba:	4638      	mov	r0, r7
 80029bc:	f7ff ffc2 	bl	8002944 <sbrk_aligned>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	4604      	mov	r4, r0
 80029c4:	d14d      	bne.n	8002a62 <_malloc_r+0xde>
 80029c6:	6834      	ldr	r4, [r6, #0]
 80029c8:	4626      	mov	r6, r4
 80029ca:	2e00      	cmp	r6, #0
 80029cc:	d140      	bne.n	8002a50 <_malloc_r+0xcc>
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	4631      	mov	r1, r6
 80029d2:	4638      	mov	r0, r7
 80029d4:	eb04 0803 	add.w	r8, r4, r3
 80029d8:	f000 f848 	bl	8002a6c <_sbrk_r>
 80029dc:	4580      	cmp	r8, r0
 80029de:	d13a      	bne.n	8002a56 <_malloc_r+0xd2>
 80029e0:	6821      	ldr	r1, [r4, #0]
 80029e2:	3503      	adds	r5, #3
 80029e4:	1a6d      	subs	r5, r5, r1
 80029e6:	f025 0503 	bic.w	r5, r5, #3
 80029ea:	3508      	adds	r5, #8
 80029ec:	2d0c      	cmp	r5, #12
 80029ee:	bf38      	it	cc
 80029f0:	250c      	movcc	r5, #12
 80029f2:	4629      	mov	r1, r5
 80029f4:	4638      	mov	r0, r7
 80029f6:	f7ff ffa5 	bl	8002944 <sbrk_aligned>
 80029fa:	3001      	adds	r0, #1
 80029fc:	d02b      	beq.n	8002a56 <_malloc_r+0xd2>
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	442b      	add	r3, r5
 8002a02:	6023      	str	r3, [r4, #0]
 8002a04:	e00e      	b.n	8002a24 <_malloc_r+0xa0>
 8002a06:	6822      	ldr	r2, [r4, #0]
 8002a08:	1b52      	subs	r2, r2, r5
 8002a0a:	d41e      	bmi.n	8002a4a <_malloc_r+0xc6>
 8002a0c:	2a0b      	cmp	r2, #11
 8002a0e:	d916      	bls.n	8002a3e <_malloc_r+0xba>
 8002a10:	1961      	adds	r1, r4, r5
 8002a12:	42a3      	cmp	r3, r4
 8002a14:	6025      	str	r5, [r4, #0]
 8002a16:	bf18      	it	ne
 8002a18:	6059      	strne	r1, [r3, #4]
 8002a1a:	6863      	ldr	r3, [r4, #4]
 8002a1c:	bf08      	it	eq
 8002a1e:	6031      	streq	r1, [r6, #0]
 8002a20:	5162      	str	r2, [r4, r5]
 8002a22:	604b      	str	r3, [r1, #4]
 8002a24:	4638      	mov	r0, r7
 8002a26:	f104 060b 	add.w	r6, r4, #11
 8002a2a:	f000 f8cf 	bl	8002bcc <__malloc_unlock>
 8002a2e:	f026 0607 	bic.w	r6, r6, #7
 8002a32:	1d23      	adds	r3, r4, #4
 8002a34:	1af2      	subs	r2, r6, r3
 8002a36:	d0b6      	beq.n	80029a6 <_malloc_r+0x22>
 8002a38:	1b9b      	subs	r3, r3, r6
 8002a3a:	50a3      	str	r3, [r4, r2]
 8002a3c:	e7b3      	b.n	80029a6 <_malloc_r+0x22>
 8002a3e:	6862      	ldr	r2, [r4, #4]
 8002a40:	42a3      	cmp	r3, r4
 8002a42:	bf0c      	ite	eq
 8002a44:	6032      	streq	r2, [r6, #0]
 8002a46:	605a      	strne	r2, [r3, #4]
 8002a48:	e7ec      	b.n	8002a24 <_malloc_r+0xa0>
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	6864      	ldr	r4, [r4, #4]
 8002a4e:	e7b2      	b.n	80029b6 <_malloc_r+0x32>
 8002a50:	4634      	mov	r4, r6
 8002a52:	6876      	ldr	r6, [r6, #4]
 8002a54:	e7b9      	b.n	80029ca <_malloc_r+0x46>
 8002a56:	230c      	movs	r3, #12
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	f000 f8b6 	bl	8002bcc <__malloc_unlock>
 8002a60:	e7a1      	b.n	80029a6 <_malloc_r+0x22>
 8002a62:	6025      	str	r5, [r4, #0]
 8002a64:	e7de      	b.n	8002a24 <_malloc_r+0xa0>
 8002a66:	bf00      	nop
 8002a68:	200000dc 	.word	0x200000dc

08002a6c <_sbrk_r>:
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	4d06      	ldr	r5, [pc, #24]	; (8002a88 <_sbrk_r+0x1c>)
 8002a70:	2300      	movs	r3, #0
 8002a72:	4604      	mov	r4, r0
 8002a74:	4608      	mov	r0, r1
 8002a76:	602b      	str	r3, [r5, #0]
 8002a78:	f7fd ff78 	bl	800096c <_sbrk>
 8002a7c:	1c43      	adds	r3, r0, #1
 8002a7e:	d102      	bne.n	8002a86 <_sbrk_r+0x1a>
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	b103      	cbz	r3, 8002a86 <_sbrk_r+0x1a>
 8002a84:	6023      	str	r3, [r4, #0]
 8002a86:	bd38      	pop	{r3, r4, r5, pc}
 8002a88:	200000e4 	.word	0x200000e4

08002a8c <__sread>:
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	460c      	mov	r4, r1
 8002a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a94:	f000 f8a0 	bl	8002bd8 <_read_r>
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	bfab      	itete	ge
 8002a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8002aa0:	181b      	addge	r3, r3, r0
 8002aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002aa6:	bfac      	ite	ge
 8002aa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002aaa:	81a3      	strhlt	r3, [r4, #12]
 8002aac:	bd10      	pop	{r4, pc}

08002aae <__swrite>:
 8002aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ab2:	461f      	mov	r7, r3
 8002ab4:	898b      	ldrh	r3, [r1, #12]
 8002ab6:	05db      	lsls	r3, r3, #23
 8002ab8:	4605      	mov	r5, r0
 8002aba:	460c      	mov	r4, r1
 8002abc:	4616      	mov	r6, r2
 8002abe:	d505      	bpl.n	8002acc <__swrite+0x1e>
 8002ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f000 f868 	bl	8002b9c <_lseek_r>
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ad6:	81a3      	strh	r3, [r4, #12]
 8002ad8:	4632      	mov	r2, r6
 8002ada:	463b      	mov	r3, r7
 8002adc:	4628      	mov	r0, r5
 8002ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae2:	f000 b817 	b.w	8002b14 <_write_r>

08002ae6 <__sseek>:
 8002ae6:	b510      	push	{r4, lr}
 8002ae8:	460c      	mov	r4, r1
 8002aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aee:	f000 f855 	bl	8002b9c <_lseek_r>
 8002af2:	1c43      	adds	r3, r0, #1
 8002af4:	89a3      	ldrh	r3, [r4, #12]
 8002af6:	bf15      	itete	ne
 8002af8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b02:	81a3      	strheq	r3, [r4, #12]
 8002b04:	bf18      	it	ne
 8002b06:	81a3      	strhne	r3, [r4, #12]
 8002b08:	bd10      	pop	{r4, pc}

08002b0a <__sclose>:
 8002b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b0e:	f000 b813 	b.w	8002b38 <_close_r>
	...

08002b14 <_write_r>:
 8002b14:	b538      	push	{r3, r4, r5, lr}
 8002b16:	4d07      	ldr	r5, [pc, #28]	; (8002b34 <_write_r+0x20>)
 8002b18:	4604      	mov	r4, r0
 8002b1a:	4608      	mov	r0, r1
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	2200      	movs	r2, #0
 8002b20:	602a      	str	r2, [r5, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f7fd fed1 	bl	80008ca <_write>
 8002b28:	1c43      	adds	r3, r0, #1
 8002b2a:	d102      	bne.n	8002b32 <_write_r+0x1e>
 8002b2c:	682b      	ldr	r3, [r5, #0]
 8002b2e:	b103      	cbz	r3, 8002b32 <_write_r+0x1e>
 8002b30:	6023      	str	r3, [r4, #0]
 8002b32:	bd38      	pop	{r3, r4, r5, pc}
 8002b34:	200000e4 	.word	0x200000e4

08002b38 <_close_r>:
 8002b38:	b538      	push	{r3, r4, r5, lr}
 8002b3a:	4d06      	ldr	r5, [pc, #24]	; (8002b54 <_close_r+0x1c>)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	4604      	mov	r4, r0
 8002b40:	4608      	mov	r0, r1
 8002b42:	602b      	str	r3, [r5, #0]
 8002b44:	f7fd fedd 	bl	8000902 <_close>
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	d102      	bne.n	8002b52 <_close_r+0x1a>
 8002b4c:	682b      	ldr	r3, [r5, #0]
 8002b4e:	b103      	cbz	r3, 8002b52 <_close_r+0x1a>
 8002b50:	6023      	str	r3, [r4, #0]
 8002b52:	bd38      	pop	{r3, r4, r5, pc}
 8002b54:	200000e4 	.word	0x200000e4

08002b58 <_fstat_r>:
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	4d07      	ldr	r5, [pc, #28]	; (8002b78 <_fstat_r+0x20>)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	602b      	str	r3, [r5, #0]
 8002b66:	f7fd fed8 	bl	800091a <_fstat>
 8002b6a:	1c43      	adds	r3, r0, #1
 8002b6c:	d102      	bne.n	8002b74 <_fstat_r+0x1c>
 8002b6e:	682b      	ldr	r3, [r5, #0]
 8002b70:	b103      	cbz	r3, 8002b74 <_fstat_r+0x1c>
 8002b72:	6023      	str	r3, [r4, #0]
 8002b74:	bd38      	pop	{r3, r4, r5, pc}
 8002b76:	bf00      	nop
 8002b78:	200000e4 	.word	0x200000e4

08002b7c <_isatty_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	4d06      	ldr	r5, [pc, #24]	; (8002b98 <_isatty_r+0x1c>)
 8002b80:	2300      	movs	r3, #0
 8002b82:	4604      	mov	r4, r0
 8002b84:	4608      	mov	r0, r1
 8002b86:	602b      	str	r3, [r5, #0]
 8002b88:	f7fd fed7 	bl	800093a <_isatty>
 8002b8c:	1c43      	adds	r3, r0, #1
 8002b8e:	d102      	bne.n	8002b96 <_isatty_r+0x1a>
 8002b90:	682b      	ldr	r3, [r5, #0]
 8002b92:	b103      	cbz	r3, 8002b96 <_isatty_r+0x1a>
 8002b94:	6023      	str	r3, [r4, #0]
 8002b96:	bd38      	pop	{r3, r4, r5, pc}
 8002b98:	200000e4 	.word	0x200000e4

08002b9c <_lseek_r>:
 8002b9c:	b538      	push	{r3, r4, r5, lr}
 8002b9e:	4d07      	ldr	r5, [pc, #28]	; (8002bbc <_lseek_r+0x20>)
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	4608      	mov	r0, r1
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	602a      	str	r2, [r5, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f7fd fed0 	bl	8000950 <_lseek>
 8002bb0:	1c43      	adds	r3, r0, #1
 8002bb2:	d102      	bne.n	8002bba <_lseek_r+0x1e>
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	b103      	cbz	r3, 8002bba <_lseek_r+0x1e>
 8002bb8:	6023      	str	r3, [r4, #0]
 8002bba:	bd38      	pop	{r3, r4, r5, pc}
 8002bbc:	200000e4 	.word	0x200000e4

08002bc0 <__malloc_lock>:
 8002bc0:	4801      	ldr	r0, [pc, #4]	; (8002bc8 <__malloc_lock+0x8>)
 8002bc2:	f7ff be0b 	b.w	80027dc <__retarget_lock_acquire_recursive>
 8002bc6:	bf00      	nop
 8002bc8:	200000d8 	.word	0x200000d8

08002bcc <__malloc_unlock>:
 8002bcc:	4801      	ldr	r0, [pc, #4]	; (8002bd4 <__malloc_unlock+0x8>)
 8002bce:	f7ff be06 	b.w	80027de <__retarget_lock_release_recursive>
 8002bd2:	bf00      	nop
 8002bd4:	200000d8 	.word	0x200000d8

08002bd8 <_read_r>:
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	4d07      	ldr	r5, [pc, #28]	; (8002bf8 <_read_r+0x20>)
 8002bdc:	4604      	mov	r4, r0
 8002bde:	4608      	mov	r0, r1
 8002be0:	4611      	mov	r1, r2
 8002be2:	2200      	movs	r2, #0
 8002be4:	602a      	str	r2, [r5, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f7fd fe52 	bl	8000890 <_read>
 8002bec:	1c43      	adds	r3, r0, #1
 8002bee:	d102      	bne.n	8002bf6 <_read_r+0x1e>
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	b103      	cbz	r3, 8002bf6 <_read_r+0x1e>
 8002bf4:	6023      	str	r3, [r4, #0]
 8002bf6:	bd38      	pop	{r3, r4, r5, pc}
 8002bf8:	200000e4 	.word	0x200000e4

08002bfc <_init>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr

08002c08 <_fini>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr
